{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app/js/DriveTreeCreator.js","app/js/index.entry.js","node_modules/@babel/runtime/helpers/asyncToGenerator.js","node_modules/@babel/runtime/helpers/classCallCheck.js","node_modules/@babel/runtime/helpers/createClass.js","node_modules/@babel/runtime/helpers/interopRequireDefault.js","node_modules/@babel/runtime/regenerator/index.js","node_modules/regenerator-runtime/runtime.js"],"names":[],"mappings":"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OAAO,CAAC,GAAR,CAAY,OAAZ;AACD,WAFD,EAlByD;;AAsBzD,WAAC,CAAC,CAAC,QAAF,EAtBwD,sEAsBlC,CAAC,CAAC,MAAF,EAtBkC;;AAwBzD,UAAA,OAAO,CAAC,IAAR,CAAa,OAAb,EAxByD;AAyBxC,YAAA,CAAC,CAAC,KAAF,EAzBwC,UAyBrD,IAzBqD;AA0BzD,UAAA,OAAO,CAAC,OAAR,CAAgB,OAAhB;AACA,UAAA,OAAO,CAAC,GAAR,CAAY,IAAZ,EA3ByD,yDAA3D;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChfile":"index.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\r\n * --------------------------------------------------------------------------\r\n * DriveTreeCreator.js\r\n * @description pretty easy way to create a ton of folder tree from google drive\r\n * @version 0.0.1\r\n * @license WTFPL\r\n * @author BUFF\r\n * --------------------------------------------------------------------------\r\n */\r\nclass DriveTreeCreator {\r\n  constructor (options) {\r\n    //  default options\r\n    this.options = {\r\n      googleAPI: {\r\n        clientId: \"\",\r\n        apiKey: \"\",\r\n        /**\r\n         which folder do you want to get from?\r\n         accept multiple folder Id\r\n         use , to segmentation\r\n         like\r\n         folderIdTest,folderIdTest2,folderIdTest3\r\n         */\r\n        folderId: \"\",\r\n        /*\r\n        the owner of the google folder\r\n        that's a point of DriveTreeCreator working\r\n        as we know , we cant get children folder or grandson folder\r\n        by google drive api, cuz google not provide it\r\n        but interestingly we can use the owner parameter to replace it!\r\n        */\r\n        owner: \"\",\r\n      },\r\n      scope: 'https://www.googleapis.com/auth/drive',\r\n      discovery_docs: [\"https://script.googleapis.com/$discovery/rest?version=v1\"],\r\n      //  list files except trash file\r\n      inTrash: false,\r\n      //  google drive api list parameter ---- files\r\n      //  https://developers.google.com/drive/api/v3/search-files\r\n      files: `id,name,size,createdTime,webContentLink,webViewLink,mimeType,parents,fileExtension`,\r\n      //  google drive api list parameter\r\n      //  https://developers.google.com/drive/api/v3/reference/files/list\r\n      includeTeamDriveItems: false,\r\n      //  sort file from dir view, accept a fn\r\n      sort: null\r\n    }\r\n    this.options = Object.assign(this.options, options)\r\n    \r\n  }\r\n  \r\n  /**\r\n   * a method from initialization google api environment\r\n   * which mean u should call it after new DriveTreeCreator,immediately\r\n   * and every method calling should after init finish\r\n   * @returns {Promise<any>} when environment has been ready for roll\r\n   */\r\n  init () {\r\n    return new Promise(async res => {\r\n      if (window.gapi) {\r\n        if (!window.gapi.client.script || !window.gapi.client.drive) {\r\n          throw new Error('make sure gapi.client.script or gapi.client.drive has been set up, use gapi.load pls');\r\n        } else {\r\n          this._event()\r\n          res()\r\n        }\r\n      } else {\r\n        await this._loadGApi()\r\n        this._event()\r\n        res()\r\n      }\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * subscribe event\r\n   *\r\n   * signInStateChange\r\n   * loadProcess\r\n   *\r\n   * @private\r\n   */\r\n  _event () {\r\n    //  user sign in state change\r\n    window.gapi.auth2.getAuthInstance().isSignedIn.listen(isSignedIn => this._emitEvent('signInStateChange', {state: isSignedIn}))\r\n  }\r\n  \r\n  /**\r\n   * manually emit an event\r\n   * @private\r\n   */\r\n  _emitEvent (eventName, payload = {}) {\r\n    if (!this.handlers) {\r\n      return\r\n    }\r\n    \r\n    let handlers = this.handlers[eventName]\r\n    handlers && handlers.forEach(handler => handler(payload))\r\n  }\r\n  \r\n  /**\r\n   * get pop page to sign in google account\r\n   */\r\n  signIn () {\r\n    return window.gapi.auth2.getAuthInstance().signIn({prompt: 'select_account'})\r\n  }\r\n  \r\n  signOut () {\r\n    return gapi.auth2.getAuthInstance().signOut()\r\n  }\r\n  \r\n  /**\r\n   * start to create tree view\r\n   * @returns {Promise<any>}\r\n   * steps:\r\n   * 1. get all files by owners user\r\n   * 2. createTree by files\r\n   * 3. sort\r\n   * 4. return specific folder from folderId parameter\r\n   */\r\n  start () {\r\n    if (!this.isSignIn()) {\r\n      throw new Error('cant run start method, should sign-in first')\r\n    }\r\n    \r\n    return new Promise(async res => {\r\n      //  step 1\r\n      //  get all files by owners user\r\n      this._emitEvent('loadProcess', {process: 'start', count: 0})\r\n      let files = []\r\n      if (window.location.href.indexOf('localhost') && false) {\r\n        let cache = window.localStorage.getItem('filesCache')\r\n        if (window.localStorage.getItem('filesCache')) {\r\n          files = JSON.parse(cache)\r\n        } else {\r\n          files = await this._getAllFilesUnderRootFolder()\r\n          window.localStorage.setItem('filesCache', JSON.stringify(files))\r\n        }\r\n      } else {\r\n        files = await this._getAllFilesUnderRootFolder()\r\n      }\r\n      \r\n      //   step 2\r\n      //  createTree by files\r\n      let dir = this._createTree(files)\r\n      \r\n      //  step 3\r\n      //  sort\r\n      if (!~this.options.files.indexOf('name')) {\r\n        throw new Error('should include `name` field in options.files')\r\n      }\r\n      \r\n      Object.keys(dir).map(key => {\r\n        this._sort(dir[key])\r\n      })\r\n      \r\n      //  step 4\r\n      //  return specific folder from folderId parameter\r\n      dir = Object.values(dir)\r\n      \r\n      \r\n      let result = []\r\n      this.options.googleAPI.folderId.split(',').map(id => result.push(this._returnSpecificFolder(dir, id)))\r\n      res(result)\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * find specific folder from dir\r\n   * @private\r\n   */\r\n  _returnSpecificFolder (dir, id) {\r\n    for (let i = 0 ; i < dir.length ; i++) {\r\n      if (dir[i].id === id) {\r\n        return dir[i]\r\n      } else {\r\n        if (dir[i].children) {\r\n          let res = this._returnSpecificFolder(dir[i].children, id)\r\n          if (res) {\r\n            return res\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  _sort (dir) {\r\n    if (dir.children && dir.children.length > 0) {\r\n      //  sort\r\n      dir.children.sort((a, b) => this.options.sort ? this.options.sort(a, b) : a.name.localeCompare(b.name, 'zh'))\r\n      dir.children.map(item => this._sort(item))\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * core !!!!!!!!!!!!!!!!!!!!!!!!!\r\n   * generator three view by parents from each file\r\n   * @param files\r\n   * @private\r\n   */\r\n  _createTree (files) {\r\n    let relationKeyPath = {}\r\n    let newData = {}\r\n    \r\n    files.map(item => newData[item.id] = item)\r\n    files = newData\r\n    newData = null\r\n    \r\n    //  core\r\n    Object.keys(files).map(key => {\r\n      if (files[key].parents) {\r\n        let parentId = files[key].parents[0]\r\n        let item = files[key]\r\n        \r\n        if (files[parentId]) {\r\n          if (files[parentId].children) {\r\n            files[parentId].children.push(item)\r\n          } else {\r\n            files[parentId].children = [item]\r\n          }\r\n          \r\n          relationKeyPath[key] = [parentId]\r\n          delete files[key]\r\n        } else {\r\n          if (relationKeyPath[parentId]) {\r\n            relationKeyPath[parentId] = this.__findKeyPath(parentId, relationKeyPath)\r\n            let parentObj = null\r\n            relationKeyPath[parentId].map(_parentId => {\r\n              if (Array.isArray(parentObj)) {\r\n                parentObj.map((__parentItem, __key) => {\r\n                  if (__parentItem.id === _parentId) {\r\n                    parentObj = parentObj[__key].children\r\n                  }\r\n                })\r\n              } else {\r\n                parentObj = files[_parentId].children\r\n              }\r\n            })\r\n            \r\n            parentObj.map(___item => {\r\n              if (___item.id === parentId) {\r\n                if (___item.children) {\r\n                  ___item.children.push(item)\r\n                } else {\r\n                  ___item.children = [item]\r\n                }\r\n              }\r\n            });\r\n            relationKeyPath[key] = [parentId]\r\n            delete files[key]\r\n          }\r\n        }\r\n      }\r\n    })\r\n    \r\n    return files\r\n  }\r\n  \r\n  __findKeyPath (key, relationPath, arr = []) {\r\n    if (relationPath[key]) {\r\n      arr = relationPath[key].concat(arr)\r\n      return this.__findKeyPath(arr[0], relationPath, arr)\r\n    } else {\r\n      return arr\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * get all files by owners user\r\n   * @param nextPageToken\r\n   * @param data\r\n   * @param count\r\n   * @returns {Promise<any>}\r\n   * @private\r\n   */\r\n  _getAllFilesUnderRootFolder (nextPageToken = '', data = [], count = 1) {\r\n    return new Promise(res => {\r\n      window.gapi.client.drive.files.list({\r\n        pageSize: 1000,\r\n        pageToken: nextPageToken,\r\n        spaces: 'drive',\r\n        q: `'${this.options.googleAPI.owner}' in owners and trashed = ${this.options.inTrash.toString()}`,\r\n        fields: `nextPageToken, files(${this.options.files})`,\r\n        includeTeamDriveItems: this.options.includeTeamDriveItems\r\n      }).then(result => {\r\n        data = data.concat(result.result.files)\r\n        //  emit event\r\n        this._emitEvent('loadProcess', {process: count, count: result.result.files.length})\r\n        count++\r\n        if (result.result.nextPageToken) {\r\n          res(this._getAllFilesUnderRootFolder(result.result.nextPageToken, data, count))\r\n        } else {\r\n          this._emitEvent('loadProcess', {process: 'down', count: data.length})\r\n          res(data)\r\n        }\r\n      });\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * check user Sign In state\r\n   */\r\n  isSignIn () {\r\n    return window.gapi.auth2.getAuthInstance().isSignedIn.get()\r\n  }\r\n  \r\n  /**\r\n   * Attach a handler function for an event.\r\n   * @param eventName\r\n   * @param handler\r\n   */\r\n  on (eventName, handler) {\r\n    let self = this\r\n    if (!this.handlers) {\r\n      this.handlers = {}\r\n    }\r\n    \r\n    let handlers = this.handlers[eventName];\r\n    \r\n    if (!handlers) {\r\n      handlers = this.handlers[eventName] = []\r\n    }\r\n    \r\n    handlers.push(handler)\r\n    \r\n    // Return an event descriptor\r\n    return {\r\n      name: eventName,\r\n      callback: handler,\r\n      un: (e, fn) => self.un(e, fn)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Remove an event handler.\r\n   * @param eventName\r\n   * @param handle\r\n   */\r\n  un (eventName, handle) {\r\n    if (!this.handlers) {\r\n      return\r\n    }\r\n    \r\n    let handlers = this.handlers[eventName]\r\n    let i\r\n    \r\n    if (handlers) {\r\n      if (handle) {\r\n        for (i = handlers.length - 1 ; i >= 0 ; i--) {\r\n          handlers[i] == handle && handlers.splice(i, 1)\r\n        }\r\n      } else {\r\n        handlers.length = 0\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * get user information from current sign in\r\n   */\r\n  getCurrentUser () {\r\n    let userProfile = window.gapi.auth2.getAuthInstance().currentUser.get().getBasicProfile()\r\n    return userProfile ? {\r\n      email: userProfile.getEmail(),\r\n      name: userProfile.getName(),\r\n      image: userProfile.getImageUrl(),\r\n      id: userProfile.getId(),\r\n      token: window.gapi.auth.getToken().access_token\r\n    } : {}\r\n  }\r\n  \r\n  /**\r\n   * load google sdk\r\n   * @private\r\n   */\r\n  _loadGApi () {\r\n    return new Promise(async res => {\r\n      await this._loadScript('https://apis.google.com/js/api.js')\r\n      window.gapi.load('client:auth2', () => {\r\n        window.gapi.client.load('drive', 'v3', async () => {\r\n          await window.gapi.client.init({\r\n            apiKey: this.options.googleAPI.apiKey,\r\n            clientId: this.options.googleAPI.clientId,\r\n            discoveryDocs: this.options.discovery_docs,\r\n            scope: this.options.scope\r\n          })\r\n          res()\r\n        })\r\n      })\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * same as $.loadScript()\r\n   * @param src\r\n   * @returns {Promise<any>}\r\n   * @private\r\n   */\r\n  _loadScript (src) {\r\n    return new Promise((res, rej) => {\r\n      let script = document.createElement('script')\r\n      script.async = true\r\n      script.onerror = () => rej()\r\n      script.onload = () => res(src)\r\n      script.src = src\r\n      document.querySelector('body').appendChild(script)\r\n    })\r\n  }\r\n  \r\n}\r\n\r\nexport default DriveTreeCreator\r\n","import DriveTreeCreator from './DriveTreeCreator'\r\n\r\ndocument.querySelector('#start').addEventListener('click', async () => {\r\n  let D = new DriveTreeCreator({\r\n    googleAPI: {\r\n      clientId: clientId.value,\r\n      apiKey: apiKey.value,\r\n      folderId: folderId.value,\r\n      owner: owner.value\r\n    }\r\n  })\r\n  \r\n  await D.init()\r\n  \r\n  //  loading state change\r\n  D.on('signInStateChange', payload => {\r\n    console.log(payload)\r\n  })\r\n  \r\n  //  loading process\r\n  D.on('loadProcess', payload => {\r\n    console.log(payload)\r\n  })\r\n  \r\n  !D.isSignIn() && await D.signIn()\r\n  \r\n  console.time('start')\r\n  let data = await D.start()\r\n  console.timeEnd('start')\r\n  console.log(data)\r\n})\r\n\r\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;","module.exports = require(\"regenerator-runtime\");\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}